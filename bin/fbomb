#! /usr/bin/env ruby

Main {
##
#
  edit_config_file! <<-__
    flowdock:
      organizaion: YOUR_ORGANIZATION
      flow: YOUR_FLOW
      token: YOUR_PERSONAL_AS_OPPOSED_TO_FLOW_BASED_TOKEN

    flowdock:
      organizaion: YOUR_ORGANIZATION
      flow: YOUR_FLOW
      token: TOP_LEVEL_TOKEN_FOUND_HERE # http://cl.ly/VU6j/Screen%20Shot%202014-05-12%20at%2012.36.39%20PM.png 

      options:
        client:
          api_token: FLOW_LEVEL_API_TOKEN_FOUND_HERE # http://cl.ly/VTKt/Screen%20Shot%202014-05-12%20at%2012.37.35%20PM.png 
          source: arbitrary-application-name-without-spaces
          external_user_name: arbitrary-roboto-name-without-spaces 
          from:
            name: Robot First Last Name
            email: robot's email (must have access!)

    commands:
      - system
      - builtin
  __

  daemonizes!

  option('--force', '-f')
  option('--state=state', '-s')

##
#
  def before_run
    $cmd = [Util.which_ruby, File.expand_path(__FILE__), *ARGV].join(' ')

    state = (ENV['STATE'] || params[:state].values.first).to_s.strip

    unless state.empty? 
      path = File.expand_path(state)
      dirname, basename = File.split(path)

      if dirname == '/'
        dirname = path
        basename = '.fbomb'
      end

      ENV['STATE_DIRNAME'] = dirname
      ENV['STATE_BASENAME'] = basename
    end
  end

  def run
    STDOUT.sync = true
    STDERR.sync = true

    load_commands!
    load_flow!
    drop_fbombs!
  end

  def drop_fbombs!
  #
    at_exit{ @flow.leave }

    # @flow.speak("fbomb (beta) in da house...")

    trap('INT'){ exit }

=begin
{"event"=>"activity.user", "tags"=>[], "uuid"=>nil, "persist"=>false, "id"=>194342, "flow"=>"c6dbc029-2173-4fb6-a423-32293c373106", "content"=>{"last_activity"=>1399656686378}, "sent"=>1399657205286, "app"=>nil, "attachments"=>[], "user"=>"76002"}
=end

  #
    $inactive = true
    $active_at = Time.now

    @monitor =
      Thread.new do
        Thread.current.abort_on_exception = true

        loop do
          sleep(60)

          if($inactive and ((Time.now - $active_at).abs > 300))
            Kernel.exec($cmd)
          end
        end
      end

  #
    loop do
      logging_errors do
        @flow.stream do |flow|
          @flow.current = flow

          begin
            $inactive = false
            $active_at = Time.now

          #
            next unless %w[ message comment ].include?(flow[:event])

          #
            content = flow[:content]

            case content
              when Hash
                content = content[:text].to_s
              else
                content = content.to_s
            end

          #
            tokens = content.scan(%r/[^\s]+/)
            arg, *args = tokens

          #
            FBomb::Command.table.each do |key, command|
              if command.matches?(content)
                user = @flow.user_for(flow[:user])
                FBomb::Command.user = user
                begin
                  logging_errors do
                    logger.info("#{ key } =~ #{ content }")
                    command.call(content)
                  end
                ensure
                  FBomb::Command.user = nil
                end
              end
            end

          #
            if arg =~ %r|^\s*#{ Regexp.escape(FBomb.leader) }|
              if arg.strip == FBomb.leader
                key = "#{ FBomb.leader }#{ args.shift }"
              else
                key = arg.strip
              end

              command = FBomb::Command.table[key]

              if command
                user = @flow.user_for(flow[:user])
                FBomb::Command.user = user
                begin
                  logging_errors do
                    logger.info("#{ key } #{ args.join(' ') }")
                    command.call(*args)
                  end
                ensure
                  FBomb::Command.user = nil
                end
              end
            else
              if @flow.yelling?
                @flow.yell(content)
              end
            end
          ensure
            $inactive = true
          end
       end

        sleep(rand(42))
      end
    end
  end

  def load_commands!
    FBomb::Command.load(config[:commands])
  end

  def load_flow!
    organizaion, flow, token =
      Map.for(config[:flowdock]).slice(:organizaion, :flow, :token).values

    options = config.get(:flowdock, :options)

    @flowdock = FBomb::Flowdock.new(organizaion, flow, token, options)

    @flow = @flowdock.flow

    FBomb::Command.flow = @flow
  end

  def run_command!
    path, *args = argv
    commands = FBomb::Command.table
    command = commands[path] or abort("no such command #{ path }")
    #FBomb::Command.flow = nil unless params['force'].given?
    stdin = read_standard_input()
    (args << stdin.chomp) if stdin
    command.call(*args)
    exit
  end

  def read_standard_input
    require 'io/wait'
    input = nil 
    return input unless STDIN.ready?
    loop do
      begin
        buf = STDIN.readpartial(8192)
        input ||= ''
        input << buf
      rescue EOFError
        break
      end
    end
    input
  end

##
#
  mode(:shell) do
    def run
      load_commands!
      load_flow!

      require 'irb'

      $FUCKING_HACK = IRB.method(:load_modules)
      $FLOWDOCK = @flowdock

      def IRB.load_modules
        $FUCKING_HACK.call()

        prompt = "#{ $FLOWDOCK.organization }/#{ $FLOWDOCK.flow }" 

        IRB.conf[:PROMPT][:RO] = {
          :PROMPT_I=>"#{ prompt }:%03n:%i> ",
          :PROMPT_N=>"#{ prompt }:%03n:%i> ",
          :PROMPT_S=>"#{ prompt }:%03n:%i%l ",
          :PROMPT_C=>"#{ prompt }:%03n:%i* ",
          :RETURN=>"=> %s\n"
        }

        IRB.conf[:PROMPT_MODE] = :RO
        IRB.conf[:AUTO_INDENT] = true
      end

      Kernel.module_eval do
        def flowdock
          $FLOWDOCK
        end

        def flow
          flowdock.flow
        end
      end

      ARGV.clear

      ::IRB.start
    end

    def method_missing(method, *args, &block)
      ivar = "@#{ method }"
      super unless instance_variable_defined?(ivar)
      instance_variable_get(ivar)
    end
  end

##
#
  mode(:speak) do
    option('--tag=tag', '-t')

    def run
      speak!
    end
  end

  mode(:paste) do
    option('--tag=tag', '-t')

    def run
      paste!
    end
  end

  mode(:execute) do
    def run
      load_commands!
      load_flow!
      run_command! if argv.first =~ %r|^#{ Regexp.escape(FBomb.leader) }| unless argv.empty?
    end
  end

##
#
  mode(:setup) do
    def run
      puts self.class.config_path
    end
  end

##
#
  def logging_errors(&block)
    begin
      block.call()
    rescue Object => e
      raise if e.is_a?(SystemExit)
      m, c, b = e.message, e.class, Array(e.backtrace).join("\n")
      logger.error("#{ m }(#{ c })\n#{ b }")
    end
  end

  def speak_or_paste!(which)
    load_commands!
    load_flow!

    tags = 
      if params['tag'] and params['tag'].given?
        Coerce.list_of_strings(params['tag'].value)
      else
        []
      end

    content = argv.join(' ')

    if content.strip == '-'
      content = STDIN.read
    end

    @flow.send(which, content, :tags => tags)
  end

  def speak!
    speak_or_paste!(:speak)
  end

  def paste!
    speak_or_paste!(:paste)
  end
}

BEGIN{
  bindir = File.expand_path(File.dirname(__FILE__))
  srcdir = File.dirname(bindir)
  libdir = File.join(srcdir, 'lib')
  lib = File.join(libdir, 'fbomb.rb')
  require(test(?s, lib) ? lib : 'fbomb')


  class Map
    def slice(*keys)
      keys = keys.map! { |key| convert_key(key) } if respond_to?(:convert_key, true)
      hash = self.class.new
      keys.each { |k| hash[k] = self[k] if has_key?(k) }
      hash
    end
  end
}


__END__
