#! /usr/bin/env ruby

Main {
##
#
  edit_config_file! <<-__
    flowdock:
      organizaion: YOUR_ORGANIZATION
      flow: YOUR_FLOW
      token: YOUR_PERSONAL_AS_OPPOSED_TO_FLOW_BASED_TOKEN

    commands:
      - system
      - builtin
  __


  option('--force', '-f')

##
#
  def run
    load_commands!
    load_flow!
    run_command! if argv.first =~ %r|^#{ Regexp.escape(FBomb.leader) }| unless argv.empty?
  end

  def load_commands!
    FBomb::Command.load(config[:commands])
  end

  def load_flow!
    organizaion, flow, token =
      Map.for(config[:flowdock]).slice(:organizaion, :flow, :token).values

    options = config.get(:flowdock, :options)

    @flowdock = FBomb::Flowdock.new(organizaion, flow, token, options)

    @flow = @flowdock.flow

    FBomb::Command.flow = @flow
  end

  def run_command!
    path, *args = argv
    commands = FBomb::Command.table
    command = commands[path] or abort("no such command #{ path }")
    #FBomb::Command.flow = nil unless params['force'].given?
    stdin = read_standard_input()
    (args << stdin.chomp) if stdin
    command.call(*args)
    exit
  end

  def read_standard_input
    require 'io/wait'
    input = nil 
    return input unless STDIN.ready?
    loop do
      begin
        buf = STDIN.readpartial(8192)
        input ||= ''
        input << buf
      rescue EOFError
        break
      end
    end
    input
  end

##
#
  mode(:shell) do
    def run
      load_commands!
      load_flow!

      require 'irb'

      $FUCKING_HACK = IRB.method(:load_modules)
      $FLOWDOCK = @flowdock

      def IRB.load_modules
        $FUCKING_HACK.call()

        prompt = "#{ $FLOWDOCK.organization }/#{ $FLOWDOCK.flow }" 

        IRB.conf[:PROMPT][:RO] = {
          :PROMPT_I=>"#{ prompt }:%03n:%i> ",
          :PROMPT_N=>"#{ prompt }:%03n:%i> ",
          :PROMPT_S=>"#{ prompt }:%03n:%i%l ",
          :PROMPT_C=>"#{ prompt }:%03n:%i* ",
          :RETURN=>"=> %s\n"
        }

        IRB.conf[:PROMPT_MODE] = :RO
        IRB.conf[:AUTO_INDENT] = true
      end

      Kernel.module_eval do
        def flowdock
          $FLOWDOCK
        end

        def flow
          flowdock.flow
        end
      end

      ARGV.clear

      ::IRB.start
    end

    def method_missing(method, *args, &block)
      ivar = "@#{ method }"
      super unless instance_variable_defined?(ivar)
      instance_variable_get(ivar)
    end
  end

##
#
  mode(:stop) do
    def run
      pid = IO.read(File.join(dotdir, 'pid')).to_i
      Process.kill(-9, pid)
    rescue
      nil
    end
  end

  mode(:pid) do
    def run
      pid = IO.read(File.join(dotdir, 'pid')).to_i
      puts pid
    rescue
      nil
    end
  end

  mode(:run) do
    option('--daemon', '-d')

    def run
      if params['daemon'].given?
        DATA.flock(File::LOCK_EX|File::LOCK_NB) or exit!(42)
        Dir.chdir('/tmp')
        exit! if fork
        exit! if fork
        open(File.join(dotdir, 'pid'), 'w'){|fd| fd.write($$)}
        open('/dev/null', 'w+') do |fd|
          STDOUT.reopen(fd)
          STDERR.reopen(fd)
        end
      end

      load_commands!
      load_flow!
      drop_fbombs!
    end

    def drop_fbombs!
      FBomb::Command.flow = @flow

      at_exit{ @flow.leave }

      @flow.speak("fbomb (beta) in da house...")

      trap('INT'){ exit }

=begin
{"event"=>"activity.user", "tags"=>[], "uuid"=>nil, "persist"=>false, "id"=>194342, "flow"=>"c6dbc029-2173-4fb6-a423-32293c373106", "content"=>{"last_activity"=>1399656686378}, "sent"=>1399657205286, "app"=>nil, "attachments"=>[], "user"=>"76002"}
=end
      loop do
        logging_errors do
          @flow.stream do |flow|
#p :flow => flow
            next unless flow[:event] == 'message'

            content = flow[:content].to_s
            tokens = content.scan(%r/[^\s]+/)
            arg, *args = tokens

            if arg =~ %r|^\s*#{ Regexp.escape(FBomb.leader) }|
              key = arg.strip
              command = FBomb::Command.table[key]

              if command
                user = @flow.user_for(flow[:user])
#p :user => user
                FBomb::Command.user = user
                begin
                  logging_errors do
                    logger.info("#{ key } #{ args.join(' ') }")
                    command.call(*args)
                  end
                ensure
                  FBomb::Command.user = nil
                end
              end
            end
         end

          sleep(rand(42))
        end
      end
    end
  end

##
#
  mode(:setup) do
    def run
      puts self.class.config_path
    end
  end

##
#
  def logging_errors(&block)
    begin
      block.call()
    rescue Object => e
      raise if e.is_a?(SystemExit)
      m, c, b = e.message, e.class, Array(e.backtrace).join("\n")
      logger.error("#{ m }(#{ c })\n#{ b }")
    end
  end
}

BEGIN{
  bindir = File.expand_path(File.dirname(__FILE__))
  srcdir = File.dirname(bindir)
  libdir = File.join(srcdir, 'lib')
  lib = File.join(libdir, 'fbomb.rb')
  require(test(?s, lib) ? lib : 'fbomb')


  class Map
    def slice(*keys)
      keys = keys.map! { |key| convert_key(key) } if respond_to?(:convert_key, true)
      hash = self.class.new
      keys.each { |k| hash[k] = self[k] if has_key?(k) }
      hash
    end
  end
}


__END__
